{
    "name": "Onion-extension",
    "displayName": "Onion Language Support",
    "description": "Language support for Onion programming language",
    "version": "0.1.0",
    "engines": {
        "vscode": "^1.60.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "activationEvents": [],
    "main": "./extension.js",
    "contributes": {
        "languages": [
            {
                "id": "Onion",
                "aliases": [
                    "Onion",
                    "Onion"
                ],
                "extensions": [
                    ".onion",
                    ".Onion"
                ],
                "configuration": "./language-configuration.json",
                "icon": {
                    "light": "./images/icon.svg",
                    "dark": "./images/icon.svg"
                }            }
        ],
        "commands": [
            {
                "command": "Onion.run",
                "title": "Run Onion File",
                "icon": "$(play)"
            },
            {
                "command": "Onion.diagnose",
                "title": "Onion Diagnostics"
            },
            {
                "command": "Onion.triggerCompletion",
                "title": "Onion Code Completion"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "when": "editorLangId == Onion",
                    "command": "Onion.run",
                    "group": "navigation"
                }
            ],
            "explorer/context": [
                {
                    "when": "resourceExtname == .onion",
                    "command": "Onion.run",
                    "group": "navigation"
                }
            ],
            "editor/title/run": [
                {
                    "when": "resourceExtname == .onion",
                    "command": "Onion.run",
                    "group": "navigation"
                }
            ]
        },
        "configuration": {
            "title": "Onion",
            "properties": {                "Onion.runtimePath": {
                    "type": "string",
                    "default": "onion",
                    "description": "Path to the Onion runtime executable"
                },
                "Onion.useFullPath": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to use full path when calling Onion executable"
                },
                "Onion.workingDirectory": {
                    "type": "string",
                    "default": "",
                    "description": "Working directory to use when running Onion, defaults to file directory"
                },
                "Onion.shellType": {
                    "type": "string",
                    "enum": [
                        "default",
                        "bash",
                        "sh",
                        "powershell",
                        "cmd"
                    ],                    "default": "default",
                    "description": "Shell type to use"
                },
                "Onion.lspPort": {
                    "type": "number",
                    "default": 9257,
                    "description": "Port number used by LSP server"
                },
                "Onion.semanticHighlighting": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to enable semantic highlighting"
                }
            }
        },
        "semanticTokenTypes": [            {
                "id": "null",
                "description": "Null value token",
                "superType": "keyword"
            },
            {
                "id": "boolean",
                "description": "Boolean value token",
                "superType": "keyword"
            },
            {
                "id": "base64",
                "description": "Base64 encoded data",
                "superType": "string"
            },
            {
                "id": "let",
                "description": "Variable declaration",
                "superType": "variable"
            },
            {
                "id": "body",
                "description": "Code block body",
                "superType": "namespace"
            },
            {
                "id": "boundary",
                "description": "Boundary marker",
                "superType": "operator"
            },
            {
                "id": "assign",
                "description": "Assignment operation",
                "superType": "operator"
            },
            {
                "id": "lambdaDef",
                "description": "Lambda definition",
                "superType": "function"
            },
            {
                "id": "expressions",
                "description": "Expressions",
                "superType": "variable"
            },
            {
                "id": "lambdaCall",
                "description": "Lambda call",
                "superType": "function"
            },
            {
                "id": "asyncLambdaCall",
                "description": "Async lambda call",
                "superType": "function"
            },
            {
                "id": "operation",
                "description": "Operation",
                "superType": "operator"
            },
            {
                "id": "tuple",
                "description": "Tuple",
                "superType": "struct"
            },
            {
                "id": "assumeTuple",
                "description": "Assumed tuple",
                "superType": "struct"
            },
            {
                "id": "keyValue",
                "description": "Key-value pair",
                "superType": "operator"
            },
            {
                "id": "indexOf",
                "description": "Index operation",
                "superType": "operator"
            },
            {
                "id": "getAttr",
                "description": "Get attribute",
                "superType": "operator"
            },
            {
                "id": "return",
                "description": "Return statement",
                "superType": "keyword"
            },
            {
                "id": "raise",
                "description": "Raise exception",
                "superType": "keyword"
            },
            {
                "id": "if",
                "description": "Conditional statement",
                "superType": "keyword"
            },
            {
                "id": "while",
                "description": "Loop statement",
                "superType": "keyword"
            },
            {
                "id": "namedTo",
                "description": "Named reference",
                "superType": "variable"
            },
            {
                "id": "break",
                "description": "Break loop",
                "superType": "keyword"
            },
            {
                "id": "continue",
                "description": "Continue loop",
                "superType": "keyword"
            },
            {
                "id": "range",
                "description": "Range operation",
                "superType": "operator"
            },
            {
                "id": "in",
                "description": "Contains check",
                "superType": "keyword"
            },
            {
                "id": "emit",
                "description": "Async emit",
                "superType": "keyword"
            },
            {
                "id": "alias",
                "description": "Alias definition",
                "superType": "variable"
            },
            {
                "id": "set",
                "description": "Set type",
                "superType": "type"
            },
            {
                "id": "map",
                "description": "Map type",
                "superType": "type"
            }
        ],
        "semanticTokenScopes": [
            {
                "scopes": {
                    "comment": [
                        "comment.block.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "null": [
                        "constant.language.null.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "boolean": [
                        "constant.language.boolean.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "base64": [
                        "string.base64.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "let": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "body": [
                        "entity.name.section.body.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "boundary": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "assign": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "lambdaDef": [
                        "entity.name.function.lambda.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "expressions": [
                        "comment.block.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "lambdaCall": [
                        "meta.function-call.lambda.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "asyncLambdaCall": [
                        "meta.function-call.async.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "operation": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "tuple": [
                        "support.type.tuple.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "assumeTuple": [
                        "support.type.assumeTuple.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "keyValue": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "indexOf": [
                        "keyword.operator.index.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "getAttr": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "return": [
                        "keyword.control.flow.return.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "raise": [
                        "keyword.control.exception.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "if": [
                        "keyword.control.conditional.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "while": [
                        "keyword.control.loop.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "namedTo": [
                        "keyword.operator.arithmetic.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "break": [
                        "keyword.control.loop.break.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "continue": [
                        "keyword.control.loop.continue.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "range": [
                        "constant.operator.range.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "in": [
                        "keyword.operator.comparison.in.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "emit": [
                        "keyword.control.flow.emit.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "alias": [
                        "entity.name.type.alias.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "set": [
                        "support.type.set.Onion"
                    ]
                }
            },
            {
                "scopes": {
                    "map": [
                        "support.type.map.Onion"
                    ]
                }
            }
        ],
        "keybindings": [
            {
                "command": "Onion.run",
                "key": "f5",
                "mac": "f5",
                "when": "editorLangId == Onion"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "echo 'No compilation needed'",
        "watch": "echo 'Watch mode not supported'"
    },
    "dependencies": {
        "vscode-languageclient": "^9.0.1"
    },
    "devDependencies": {
        "@types/vscode": "^1.60.0"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/sjrsjz/Onion-Extension.git"
    },
    "keywords": [
        "vscode",
        "Onion",
        "extension",
        "language",
        "lsp"
    ],
    "author": "sjrsjz",
    "license": "MIT",
    "type": "commonjs",
    "bugs": {
        "url": "https://github.com/sjrsjz/Onion-Extension/issues"
    },
    "homepage": "https://github.com/sjrsjz/Onion-Extension#readme",
    "icon": "images/icon.ico",
    "publisher": "sjrsjz"
}